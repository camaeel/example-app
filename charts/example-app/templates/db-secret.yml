{{- if .Values.postgres.enabled -}}
{{- $secret := (lookup "v1" "Secret" .Release.Namespace .Values.postgres.auth.existingSecret) -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.postgres.auth.existingSecret }}
type: Opaque

# 2. If the secret exists, write it back out (it'll be Base64 encoded so used the "data" key)
{{ if $secret -}}
data:
  username: {{ $secret.data.username }}
  password: {{ $secret.data.password }}
  database: {{ $secret.data.database }}
  postgres-password: {{ index $secret.data "postgres-password" }}
stringData:
  DATABASE_URL: "postgres://{{ b64dec $secret.data.username }}:{{ b64dec $secret.data.password }}@example-app-postgres/{{ b64dec $secret.data.database }}?sslmode={{ .Values.postgres.sslmode }}"

# 3. If it doesn't exist ... create it (this time as "stringData" as it will be a raw value) !
{{ else -}}
{{- $password := (randAlphaNum 32) -}}
stringData:
  username: {{ .Values.postgres.auth.username }}
  password: {{ $password }}
  database: {{ .Values.postgres.auth.database }}
  postgres-password: {{ randAlphaNum 32 }}
  DATABASE_URL: "postgres://{{ .Values.postgres.auth.username }}:{{ $password }}@example-app-postgres/{{ .Values.postgres.auth.database }}?sslmode={{ .Values.postgres.sslmode }}"
{{ end }}

{{- end -}}
